#include <iostream>
#include <string>
#include <string.h>

bool palindrome_str(std::string s)
{
	if(s.size() < 2)
		return true;
	return (s[0] == s[s.size() - 1]) && palindrome_str(s.substr(1, s.size() - 2));
}

bool palindrome_str_tr(std::string s)
{
	if(s.size() < 2)
		return true;
	if(s[0] != s[s.size() - 1])
		return false;
	return palindrome_str_tr(s.substr(1, s.size() - 2));
}

bool char_star_palindrome(char* start, char* end)
{
	if(end - start < 2)
		return true;
	return (*start == *end) && char_star_palindrome(start + 1, end - 1);
}

bool char_star_palindrome_tr(char* start, char* end)
{
	if(end - start < 2)
		return true;
	if(*start != *end)
		return false;
	return char_star_palindrome_tr(start + 1, end - 1);
}

template <typename BI>
bool iterator_palindrome(BI& start, BI& end)
{
	if(*start != *end)
		return false;
	if(start == end || ++start == end)
		return true;
	return _iterator_palindrome(start, --end);
}

/*(template <typename BI>
bool iterator_palindrome(BI& start, BI& end)
{
	if(start == end)
		return true;
	return _iterator_palindrome(start, --end);
}*/

int main()
{
	std::string s;
	std::string::iterator it;
	std::string::iterator end;
	bool b;

	s = "amanaplanacanalpanama";
	it = s.begin();
	end = s.end();
	b = iterator_palindrome(it, end);
	std::cout << s << " was " << (b ? "" : "not ") << "a palindrome.\n";

	s = std::string(50, 'a');
	it = s.begin();
	end = s.end();
	b = iterator_palindrome(it, end);
	std::cout << s << " was " << (b ? "" : "not ") << "a palindrome.\n";

	s = "Alpaca";
	it = s.begin();
	end = s.end();
	b = iterator_palindrome(it, end);
	std::cout << s << " was " << (b ? "" : "not ") << "a palindrome.\n";

	s = std::string(10000, 'b');
	it = s.begin();
	end = s.end();
	b = iterator_palindrome(it, end);
	std::cout << "s1" << " was " << (b ? "" : "not ") << "a palindrome.\n";

	s = "a";
	it = s.begin();
	end = s.end();
	b = iterator_palindrome(it, end);
	std::cout << s << " was " << (b ? "" : "not ") << "a palindrome.\n";

	s = "";
	it = s.begin();
	end = s.end();
	b = iterator_palindrome(it, end);
	std::cout << s << " was " << (b ? "" : "not ") << "a palindrome.\n";

	char* c = (char*)malloc(1000001);
	for(int i = 0; i < 1000000; ++i)
		c[i] = 'z';
	c[1000000] = 0;
	std::cout << "strlen(c) = " << strlen(c) << "\n";
	char* cend = c + 999999;
	b = iterator_palindrome(c, cend);
	std::cout << "c (1 million z's)" << " was " << (b ? "" : "not ") << "a palindrome.\n";

	return 0;
}